import vk_api
import json
import re
import logging
import db
import config
import datetime

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard_auth = json.dumps({
    "one_time": False,
    "buttons": [
        [
            {"action": {"type": "text", "label": "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}, "color": "positive"},
            {"action": {"type": "text", "label": "üîë –í—Ö–æ–¥"}, "color": "primary"}
        ]
    ]
}, ensure_ascii=False)

keyboard_main = json.dumps({
    "one_time": False,
    "buttons": [
        [{"action": {"type": "text", "label": "üí¨ –ò–≥—Ä–æ–≤—ã–µ —á–∞—Ç—ã"}, "color": "positive"}],
        [{"action": {"type": "text", "label": "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "‚ö° –ü–æ–ø–æ–ª–Ω–∏—Ç—å"}, "color": "primary"},
         {"action": {"type": "text", "label": "üì§ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏"}, "color": "primary"}],
        [{"action": {"type": "text", "label": "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"}, "color": "positive"}],
        [{"action": {"type": "text", "label": "üî• –¢–æ–ø –¥–Ω—è"}, "color": "negative"},
         {"action": {"type": "text", "label": "üåø –¢–æ–ø –Ω–µ–¥–µ–ª–∏"}, "color": "negative"}],
        [{"action": {"type": "text", "label": "üéÅ –¢–æ–ø –∫–ª–∞–Ω–æ–≤"}, "color": "negative"}],
        [{"action": {"type": "text", "label": "üìò –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?"}, "color": "secondary"}],
        [{"action": {"type": "text", "label": "üîó Telegram"}, "color": "primary"},
         {"action": {"type": "text", "label": "üîë –°–∞–π—Ç"}, "color": "primary"}]
    ]
}, ensure_ascii=False)

keyboard_settings = json.dumps({
    "inline": True,
    "buttons": [
        [
            {"action": {"type": "text", "label": "–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏"}, "color": "primary"},
            {"action": {"type": "text", "label": "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"}, "color": "primary"}
        ],
        [
            {"action": {"type": "text", "label": "–°–∫—Ä—ã—Ç—å –±–∞–ª–∞–Ω—Å"}, "color": "primary"},
            {"action": {"type": "text", "label": "–°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫"}, "color": "primary"}
        ],
        [
            {"action": {"type": "text", "label": "–¢–µ–≥ –∫–ª–∞–Ω–∞"}, "color": "primary"},
            {"action": {"type": "text", "label": "API"}, "color": "primary"}
        ]
    ]
}, ensure_ascii=False)

keyboard_top_up = json.dumps({
    "inline": True,
    "buttons": [
        [
            {"action": {"type": "open_link", "label": "–†—É—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞", "link": "https://example.com/manual_sale"}}
        ]
    ]
}, ensure_ascii=False)

keyboard_games = json.dumps({
    "inline": True,
    "buttons": [
        [
            {"action": {"type": "open_link", "label": "Wheel", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}},
            {"action": {"type": "open_link", "label": "Wheel Lightning", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}}
        ],
        [
            {"action": {"type": "open_link", "label": "Blackjack", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}},
            {"action": {"type": "open_link", "label": "Mines", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}}
        ],
        [
            {"action": {"type": "open_link", "label": "Slot", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}},
            {"action": {"type": "open_link", "label": "Tower", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}}
        ],
        [
            {"action": {"type": "open_link", "label": "Coin", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}},
            {"action": {"type": "open_link", "label": "Richer", "link": "https://vk.me/join/AZQ1dyaZOQbpCxc9EP3iY2pz"}}
        ]
    ]
}, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def show_profile_and_settings(user_id, vk):
    profile = db.get_user_from_db(user_id)
    if profile:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç ISO, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-02-18T10:21:32.744062)
        try:
            reg_date = datetime.datetime.strptime(profile['created_at'], '%Y-%m-%dT%H:%M:%S.%f').strftime('%d.%m.%Y')
        except Exception:
            reg_date = profile['created_at']
        message = (
            f"[vk.com/id{profile['vk_id']}|{profile['username']}]\n\n"
            f"–†–∞–Ω–≥: {profile.get('role', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–ë–∞–ª–∞–Ω—Å: {profile['balance']}\n\n"
            f"–°—É–º–º–∞ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫: {profile.get('total_bets', 0)}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {profile.get('total_wins', 0)}\n\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n\n"
            "–ö—Ä—É—Ç–∏ –≤–µ—Ä—Ç–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π:"
        )
        send_message(vk, user_id, message, keyboard_settings)
    else:
        send_message(vk, user_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'üìù —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(vk, user_id, text, keyboard=None):
    vk.messages.send(user_id=user_id, message=text, random_id=0, keyboard=keyboard)
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏
def start_name_change(user_id, vk):
    send_message(vk, user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")

def change_name(user_id, new_name, vk):
    if db.update_user_name(user_id, new_name):
        send_message(vk, user_id, f"‚úÖ –í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}.")
    else:
        send_message(vk, user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
def handle_transfer(user_id, message_text, vk, awaiting_transfer):
    state = awaiting_transfer[user_id]
    if state["step"] == "link":
        match = re.search(r"(id\d+|[^/\s@]+)$", message_text)
        if match:
            to_user_identifier = match.group(1)
            state["to_user"] = to_user_identifier
            state["step"] = "amount"
            send_message(vk, user_id, "–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?")
        else:
            send_message(vk, user_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: vk.com/id12345 –∏–ª–∏ @username")
    elif state["step"] == "amount":
        try:
            amount = float(message_text)
            to_user_identifier = state["to_user"]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∏—Å–ª–æ–≤—ã–º (id) –∏–ª–∏ username
            if to_user_identifier.isdigit():
                to_user_id = int(to_user_identifier)
            else:
                # –ó–∞–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ –±–∞–∑—ã
                headers = {
                    "apikey": config.SUPABASE_API_KEY,
                    "Authorization": f"Bearer {config.SUPABASE_API_KEY}"
                }
                url = f"{config.SUPABASE_URL}/rest/v1/users?username=eq.{to_user_identifier}&select=vk_id"
                response = requests.get(url, headers=headers)
                response.raise_for_status()
                json_resp = response.json()
                if json_resp:
                    to_user_id = json_resp[0]["vk_id"]
                else:
                    send_message(vk, user_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    del awaiting_transfer[user_id]
                    return
            result = db.transfer_balance(user_id, to_user_id, amount)
            send_message(vk, user_id, result)
            if "‚úÖ" in result:
                send_message(vk, to_user_id, f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            del awaiting_transfer[user_id]
        except ValueError:
            send_message(vk, user_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
